{
 "Resources": {
  "bucket43879C71": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "Tags": [
     {
      "Key": "Application",
      "Value": "Automatic Crawler"
     }
    ]
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/bucket/Resource"
   }
  },
  "bucketNotifications2CB09E7A": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "bucket43879C71"
    },
    "NotificationConfiguration": {
     "EventBridgeConfiguration": {},
     "TopicConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "prefix",
           "Value": "{S3_MISC_PATH}{RAW_TABLE}/"
          }
         ]
        }
       },
       "TopicArn": {
        "Ref": "Topiccrawler74E46BB9"
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "TopiccrawlerPolicyDD064160",
    "Topiccrawler74E46BB9"
   ],
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/bucket/Notifications/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": "Automatic Crawler"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    bucket = props[\"BucketName\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    request_type = event[\"RequestType\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n\n    if managed:\n      config = handle_managed(request_type, notification_configuration)\n    else:\n      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n    put_bucket_notification_configuration(bucket, config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return external_notifications\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.7",
    "Timeout": 300,
    "Tags": [
     {
      "Key": "Application",
      "Value": "Automatic Crawler"
     }
    ]
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "GlueDB8556644B": {
   "Type": "AWS::Glue::Database",
   "Properties": {
    "CatalogId": {
     "Ref": "AWS::AccountId"
    },
    "DatabaseInput": {
     "Name": "db"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/GlueDB/Resource"
   }
  },
  "crawlerrole40EA2665": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "glue.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Application",
      "Value": "Automatic Crawler"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/crawler_role/Resource"
   }
  },
  "crawlerroleDefaultPolicy82E62E28": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "bucket43879C71",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "bucket43879C71",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "cloudwatch:PutMetricData",
        "glue:*"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "arn:aws:logs:*:*:/aws-glue/*"
      },
      {
       "Action": [
        "*",
        "sqs:ChangeMessageVisibility",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:ReceiveMessage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CrawlerQueueFF85C862",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "crawlerroleDefaultPolicy82E62E28",
    "Roles": [
     {
      "Ref": "crawlerrole40EA2665"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/crawler_role/DefaultPolicy/Resource"
   }
  },
  "CrawlerQueueFF85C862": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "Tags": [
     {
      "Key": "Application",
      "Value": "Automatic Crawler"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Crawler Queue/Resource"
   }
  },
  "CrawlerQueuePolicy9A3D79AD": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:SendMessage",
       "Condition": {
        "ArnEquals": {
         "aws:SourceArn": {
          "Ref": "Topiccrawler74E46BB9"
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "sns.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "CrawlerQueueFF85C862",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "CrawlerQueueFF85C862"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Crawler Queue/Policy/Resource"
   }
  },
  "CrawlerQueueCrawlerStackTopiccrawler27139B118D78638C": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Protocol": "sqs",
    "TopicArn": {
     "Ref": "Topiccrawler74E46BB9"
    },
    "Endpoint": {
     "Fn::GetAtt": [
      "CrawlerQueueFF85C862",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Crawler Queue/CrawlerStackTopiccrawler27139B11/Resource"
   }
  },
  "Topiccrawler74E46BB9": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "Tags": [
     {
      "Key": "Application",
      "Value": "Automatic Crawler"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Topic crawler/Resource"
   }
  },
  "TopiccrawlerPolicyDD064160": {
   "Type": "AWS::SNS::TopicPolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Condition": {
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "bucket43879C71",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "s3.amazonaws.com"
       },
       "Resource": {
        "Ref": "Topiccrawler74E46BB9"
       },
       "Sid": "0"
      }
     ],
     "Version": "2012-10-17"
    },
    "Topics": [
     {
      "Ref": "Topiccrawler74E46BB9"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Topic crawler/Policy/Resource"
   }
  },
  "crawler": {
   "Type": "AWS::Glue::Crawler",
   "Properties": {
    "Role": {
     "Fn::GetAtt": [
      "crawlerrole40EA2665",
      "Arn"
     ]
    },
    "Targets": {
     "S3Targets": [
      {
       "EventQueueArn": {
        "Fn::GetAtt": [
         "CrawlerQueueFF85C862",
         "Arn"
        ]
       },
       "Path": {
        "Fn::Join": [
         "",
         [
          "s3://",
          {
           "Ref": "bucket43879C71"
          },
          "/misc/db/"
         ]
        ]
       }
      }
     ]
    },
    "DatabaseName": {
     "Ref": "GlueDB8556644B"
    },
    "RecrawlPolicy": {
     "RecrawlBehavior": "CRAWL_EVENT_MODE"
    },
    "Tags": {
     "Application": "Automatic Crawler"
    }
   },
   "DependsOn": [
    "crawlerroleDefaultPolicy82E62E28",
    "crawlerrole40EA2665"
   ],
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/crawler"
   }
  },
  "JobServiceRole4F432993": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "glue.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSGlueServiceRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": "Automatic Crawler"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Job/ServiceRole/Resource"
   }
  },
  "JobServiceRoleDefaultPolicy03F68F9D": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "bucket43879C71",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "bucket43879C71",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "JobServiceRoleDefaultPolicy03F68F9D",
    "Roles": [
     {
      "Ref": "JobServiceRole4F432993"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Job/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "JobB9D00F9F": {
   "Type": "AWS::Glue::Job",
   "Properties": {
    "Command": {
     "Name": "glueetl",
     "PythonVersion": "3",
     "ScriptLocation": {
      "Fn::Join": [
       "",
       [
        "s3://",
        {
         "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
        },
        "/cad2ae4617407dc245daf3ab2875222d7db7d5e02938ebf8e08f65249912973f.py"
       ]
      ]
     }
    },
    "Role": {
     "Fn::GetAtt": [
      "JobServiceRole4F432993",
      "Arn"
     ]
    },
    "DefaultArguments": {
     "--job-language": "python",
     "--job-bookmark-option": "job-bookmark-enable",
     "--bucket": {
      "Ref": "bucket43879C71"
     },
     "--db": {
      "Ref": "GlueDB8556644B"
     },
     "--raw_table": "db",
     "--repartitioned_table": "db_repartitioned",
     "--s3_path": "/misc/db_repartitioned/"
    },
    "GlueVersion": "3.0",
    "MaxCapacity": 2,
    "Tags": {
     "Application": "Automatic Crawler"
    },
    "Timeout": 15
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Job/Resource"
   }
  },
  "Workflow": {
   "Type": "AWS::Glue::Workflow",
   "Properties": {
    "Tags": {
     "Application": "Automatic Crawler"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Workflow"
   }
  },
  "TriggerCrawler": {
   "Type": "AWS::Glue::Trigger",
   "Properties": {
    "Actions": [
     {
      "CrawlerName": {
       "Ref": "crawler"
      }
     }
    ],
    "Type": "SCHEDULED",
    "Schedule": "cron(0 */6 * * ? *)",
    "StartOnCreation": true,
    "Tags": {
     "Application": "Automatic Crawler"
    },
    "WorkflowName": {
     "Ref": "Workflow"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Trigger Crawler"
   }
  },
  "TriggerJob": {
   "Type": "AWS::Glue::Trigger",
   "Properties": {
    "Actions": [
     {
      "JobName": {
       "Ref": "JobB9D00F9F"
      }
     }
    ],
    "Type": "CONDITIONAL",
    "Predicate": {
     "Conditions": [
      {
       "CrawlState": "SUCCEEDED",
       "CrawlerName": {
        "Ref": "crawler"
       },
       "LogicalOperator": "EQUALS"
      }
     ]
    },
    "StartOnCreation": true,
    "Tags": {
     "Application": "Automatic Crawler"
    },
    "WorkflowName": {
     "Ref": "Workflow"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Trigger Job"
   }
  },
  "TopicImageReadyA2578C95": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "Tags": [
     {
      "Key": "Application",
      "Value": "Automatic Crawler"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Topic Image Ready/Resource"
   }
  },
  "DeadLetterQueueB21A06D1": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "Tags": [
     {
      "Key": "Application",
      "Value": "Automatic Crawler"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Dead Letter Queue/Resource"
   }
  },
  "Queue4A7E3555": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "RedrivePolicy": {
     "deadLetterTargetArn": {
      "Fn::GetAtt": [
       "DeadLetterQueueB21A06D1",
       "Arn"
      ]
     },
     "maxReceiveCount": 3
    },
    "Tags": [
     {
      "Key": "Application",
      "Value": "Automatic Crawler"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Queue/Resource"
   }
  },
  "QueuePolicy25439813": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:SendMessage",
       "Condition": {
        "ArnEquals": {
         "aws:SourceArn": {
          "Ref": "TopicImageReadyA2578C95"
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "sns.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "Queue4A7E3555",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "Queue4A7E3555"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Queue/Policy/Resource"
   }
  },
  "QueueCrawlerStackTopicImageReadyC67D4E3D7D726381": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Protocol": "sqs",
    "TopicArn": {
     "Ref": "TopicImageReadyA2578C95"
    },
    "Endpoint": {
     "Fn::GetAtt": [
      "Queue4A7E3555",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/Queue/CrawlerStackTopicImageReadyC67D4E3D/Resource"
   }
  },
  "bucketnotificaation973CAAD7": {
   "Type": "Custom::AWS",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
      "Arn"
     ]
    },
    "Create": {
     "Fn::Join": [
      "",
      [
       "{\"action\":\"putBucketNotificationConfiguration\",\"service\":\"S3\",\"parameters\":{\"Bucket\":\"",
       {
        "Ref": "bucket43879C71"
       },
       "\",\"NotificationConfiguration\":{\"TopicConfigurations\":[{\"Events\":[\"s3:ObjectCreated:*\"],\"TopicArn\":\"",
       {
        "Ref": "Topiccrawler74E46BB9"
       },
       "\",\"Filter\":{\"Key\":{\"FilterRules\":[{\"Name\":\"prefix\",\"Value\":\"misc/db/\"}]}},\"Id\":\"",
       {
        "Ref": "crawler"
       },
       "\"}]}},\"physicalResourceId\":{\"id\":\"notif-",
       {
        "Ref": "crawler"
       },
       "\"}}"
      ]
     ]
    },
    "Delete": {
     "Fn::Join": [
      "",
      [
       "{\"action\":\"putBucketNotificationConfiguration\",\"service\":\"S3\",\"parameters\":{\"Bucket\":\"",
       {
        "Ref": "bucket43879C71"
       },
       "\",\"NotificationConfiguration\":{}},\"physicalResourceId\":{\"id\":\"notif-",
       {
        "Ref": "crawler"
       },
       "\"}}"
      ]
     ]
    },
    "InstallLatestAwsSdk": true
   },
   "DependsOn": [
    "bucketnotificaationCustomResourcePolicyB968D6CA"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/bucket notificaation/Resource/Default"
   }
  },
  "bucketnotificaationCustomResourcePolicyB968D6CA": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification*",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "bucketnotificaationCustomResourcePolicyB968D6CA",
    "Roles": [
     {
      "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/bucket notificaation/CustomResourcePolicy/Resource"
   }
  },
  "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": "Automatic Crawler"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/AWS679f53fac002430cb0da5b7982bd2287/ServiceRole/Resource"
   }
  },
  "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "6dbd112fe448437b3438da4382c72fccbb7d2ee1543db222620d7447fffebc50.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      "Arn"
     ]
    },
    "Handler": "index.handler",
    "Runtime": "nodejs14.x",
    "Tags": [
     {
      "Key": "Application",
      "Value": "Automatic Crawler"
     }
    ],
    "Timeout": 120
   },
   "DependsOn": [
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
   ],
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/AWS679f53fac002430cb0da5b7982bd2287/Resource",
    "aws:asset:path": "asset.6dbd112fe448437b3438da4382c72fccbb7d2ee1543db222620d7447fffebc50",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/11Ry26DMBD8ltyNU8optzapcugpTSL1iIxxiIuxqdcWiiz+vWtDSdqLZ2Yfs2h4psWGhnzFBsh43WZKVjScHOMtwVIZoKBh63krHNld9Mwm2DIQI5Gso+FolIj9hAejJL9FObGRNMoLGrDwxhyrcC02d5YNSthI300V4dPY9qLMEPnZyqYRdiTwDTR8eOHT0kTSez/zIHFe4/zJV8Ct7J00Ok780WfTS55uJJLeu9mDRLOiZADCAX2NQBTrqpqhv9SNEs7ovdc8mS4ELX75OKZMBBhvuSDJAqNtcJlwD850pZ2beGCAXaot8/8lRmZ0LZMzyTOm+iujT6uX+detI8ak505YwsZ48VMON3c1el3QDc2L1RdImVmvnewEPU74A2iy1rcMAgAA"
   },
   "Metadata": {
    "aws:cdk:path": "CrawlerStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}